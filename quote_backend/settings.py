"""
Django settings for quote_backend project.
Generated by 'django-admin startproject' using Django 5.2.4.
"""
from pathlib import Path
import os

# Optional Postgres support (only used if DATABASE_URL is set)
try:
    import dj_database_url  # type: ignore
except Exception:  # pragma: no cover
    dj_database_url = None

BASE_DIR = Path(__file__).resolve().parent.parent

# ===== Env helpers =====
def env_bool(key: str, default: str = "0") -> bool:
    return os.environ.get(key, default) in ("1", "true", "True", "YES", "yes")

def env_list(key: str, default: str = ""):
    """Split comma-separated env values and strip quotes/spaces."""
    raw = os.environ.get(key, default)
    if not raw:
        return []
    return [x.strip().strip('"').strip("'") for x in raw.split(",") if x.strip()]

# ===== Core =====
SECRET_KEY = os.environ["SECRET_KEY"]              # required in prod
DEBUG = env_bool("DEBUG", "1")                     # set 0 in prod


# Allow localhost by default; you can also set ALLOWED_HOSTS in env
ALLOWED_HOSTS = env_list("ALLOWED_HOSTS", "localhost,127.0.0.1,[::1]")

# If deploying to Heroku and HEROKU_APP_NAME is provided, add that host
HEROKU_APP_NAME = os.environ.get("HEROKU_APP_NAME")
if HEROKU_APP_NAME:
    host = f"{HEROKU_APP_NAME}.herokuapp.com"
    if host not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(host)

# Trailing-slash behavior (prevents 301 redirect on /api/quote)
APPEND_SLASH = False

# ===== CORS / CSRF =====
# Local default: allow all; in prod set CORS_ALLOW_ALL_ORIGINS=0 and provide explicit origins
CORS_ALLOW_ALL_ORIGINS = env_bool("CORS_ALLOW_ALL_ORIGINS", "1")
CORS_ALLOWED_ORIGINS = env_list("CORS_ALLOWED_ORIGINS", "http://localhost:3000")
CSRF_TRUSTED_ORIGINS = env_list("CSRF_TRUSTED_ORIGINS", "http://localhost:3000")
CORS_ALLOW_CREDENTIALS = True

# If HEROKU_APP_NAME is present, trust that origin too
if HEROKU_APP_NAME:
    heroku_origin = f"https://{HEROKU_APP_NAME}.herokuapp.com"
    if heroku_origin not in CORS_ALLOWED_ORIGINS:
        CORS_ALLOWED_ORIGINS.append(heroku_origin)
    if heroku_origin not in CSRF_TRUSTED_ORIGINS:
        CSRF_TRUSTED_ORIGINS.append(heroku_origin)

# ===== Upload limits (MB) =====
max_mb = int(os.environ.get("DATA_UPLOAD_MAX_MB", "200"))
DATA_UPLOAD_MAX_MEMORY_SIZE = max_mb * 1024 * 1024
FILE_UPLOAD_MAX_MEMORY_SIZE = max_mb * 1024 * 1024

# Stream large uploads to disk
FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
    "django.core.files.uploadhandler.MemoryFileUploadHandler",
]

# ===== Apps =====
INSTALLED_APPS = [
    'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes',
    'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles',
    'rest_framework', 'corsheaders', 'quote',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',          # must come before CommonMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'quote_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quote_backend.wsgi.application'

# ===== DB =====
# Default to SQLite for now; if DATABASE_URL is present, use it (Heroku Postgres)
DATABASES = {
    'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}
}
if os.environ.get("DATABASE_URL") and dj_database_url:
    DATABASES["default"] = dj_database_url.config(
        default=os.environ["DATABASE_URL"],
        conn_max_age=600,
        ssl_require=True,
    )

# ===== Auth =====
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# ===== I18N =====
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ===== Static / Media =====
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_KEEP_ONLY_HASHED_FILES = True

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===== Heroku HTTPS / security =====
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = not DEBUG

if not DEBUG:
    # Sensible production hardening (works fine on Heroku)
    SECURE_HSTS_SECONDS = 60 * 60 * 24 * 30  # 30 days
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# ===== Logging (stdout) =====
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {'class': 'logging.StreamHandler'},
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO' if not DEBUG else 'DEBUG',
    },
}
